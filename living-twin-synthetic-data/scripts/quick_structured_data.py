#!/usr/bin/env python3
"""
Quick Structured Data Generator - Simplified version
"""

import json
import os
from pathlib import Path
from rich.console import Console

console = Console()

def create_structured_data():
    """Create structured data organization"""
    
    # Create directories
    data_dir = Path("data")
    orgs_dir = data_dir / "organizations"
    delegations_dir = data_dir / "delegations"
    
    orgs_dir.mkdir(parents=True, exist_ok=True)
    delegations_dir.mkdir(parents=True, exist_ok=True)
    
    # Load organizations
    source_dir = Path("synthetic-data/outputs/organizations")
    if not source_dir.exists():
        console.print("❌ No organization data found")
        return
    
    org_files = list(source_dir.glob("*.json"))
    console.print(f"📊 Processing {len(org_files)} organizations...")
    
    processed = 0
    
    for org_file in org_files:
        try:
            with open(org_file, 'r') as f:
                org = json.load(f)
            
            org_id = org.get('id', f'org_{processed}')
            org_name = org.get('name', 'Unknown Organization')
            
            # Create organization directory
            org_dir = orgs_dir / org_id
            org_dir.mkdir(exist_ok=True)
            
            # Copy organization data
            with open(org_dir / f"{org_id}.json", 'w') as f:
                json.dump(org, f, indent=2)
            
            # Create simple markdown report
            markdown = f"""# {org_name}

## Overview
- **Organization ID**: `{org_id}`
- **Industry**: {org.get('industry', 'Unknown')}
- **Size**: {org.get('size', 'Unknown')} employees
- **Revenue**: {org.get('revenue_range', 'Unknown')}
- **Headquarters**: {org.get('headquarters', 'Unknown')}

## Structure
- **Type**: {org.get('structure_type', 'Unknown')}
- **Delegation Culture**: {org.get('delegation_culture', 'Unknown')}
- **Decision Speed**: {org.get('decision_speed', 'Unknown')}

## Data Files
- `{org_id}.json` - Organization data
- `people_{org_id}.json` - Employee data (if available)
- `scenarios_{org_id}.json` - Delegation scenarios (if available)

---
*Generated by Living Twin Synthetic Data System*
"""
            
            # Save markdown report
            with open(org_dir / f"{org_id}_report.md", 'w') as f:
                f.write(markdown)
            
            processed += 1
            
            if processed % 20 == 0:
                console.print(f"✅ Processed {processed} organizations...")
                
        except Exception as e:
            console.print(f"⚠️ Error processing {org_file}: {e}")
    
    # Create overview README
    overview = f"""# Living Twin Synthetic Data - Structured Organization

## 📊 Dataset Summary
- **Total Organizations**: {processed:,}
- **Data Structure**: Organized by organization ID

## 📁 Directory Structure
```
data/
├── organizations/
│   ├── org_001/
│   │   ├── org_001_report.md      # Human-readable report
│   │   └── org_001.json           # Raw organization data
│   ├── org_002/
│   └── ...
└── delegations/
    └── (delegation summaries - coming soon)
```

## 🚀 Usage
Each organization has:
- **Markdown Report**: `org_XXX_report.md` - Human-readable overview
- **JSON Data**: `org_XXX.json` - Machine-readable structured data

Generated from {len(org_files)} source organizations.
"""
    
    with open(data_dir / "README.md", 'w') as f:
        f.write(overview)
    
    console.print(f"🎉 [green]Success![/green]")
    console.print(f"📁 Created structured data directory: `data/`")
    console.print(f"🏢 Processed {processed} organizations")
    console.print(f"📋 Each org has markdown report + JSON data")

if __name__ == "__main__":
    create_structured_data()