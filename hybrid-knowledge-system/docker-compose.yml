
services:
  neo4j:
    image: neo4j:5.18-community
    container_name: hybrid-neo4j
    ports:
      - "7475:7474"  # HTTP
      - "7688:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/hybridpass123
      - NEO4J_PLUGINS=["apoc", "n10s"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4JLABS_PLUGINS=["apoc"]
      # Enable vector search capabilities
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,n10s.*
      - NEO4J_dbms_memory_heap_initial__size=1G
      - NEO4J_dbms_memory_heap_max__size=2G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    restart: unless-stopped
    networks:
      - hybrid-network
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p hybridpass123 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 5

  weaviate:
    image: semitechnologies/weaviate:1.24.1
    container_name: hybrid-weaviate
    ports:
      - "8081:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: ''
      CLUSTER_HOSTNAME: 'node1'
      # Performance optimizations
      LIMIT_RESOURCES: 'false'
      GO_MAX_PROCS: '4'
      # Vector index settings
      HNSW_M: '16'
      HNSW_EF: '64'
      HNSW_EF_CONSTRUCTION: '128'
      HNSW_MAX_CONNECTIONS: '32'
    volumes:
      - weaviate_data:/var/lib/weaviate
    restart: unless-stopped
    networks:
      - hybrid-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7.2-alpine
    container_name: hybrid-redis
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - hybrid-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Monitoring with Grafana + Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: hybrid-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - hybrid-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: hybrid-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=hybrid123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - hybrid-network
    profiles:
      - monitoring
    depends_on:
      - prometheus

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  weaviate_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  hybrid-network:
    driver: bridge